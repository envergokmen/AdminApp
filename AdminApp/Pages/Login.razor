@layout EmptyLayout
@page "/login"
@inject StateContainer state
@inject NavigationManager NavigationManager
@inject HttpClient Http
@using Newtonsoft.Json
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div id="LoginRegisterCon" class="container">
    <h1>@state.Localized("SignIn")</h1>
    <form action="/Login" id="LoginRegisterForm" method="post">
    <input class="block-level" id="UserName" name="UserName" placeholder="Username / Email" maxlength="90" required="" type="text">
    <input class="block-level" id="PassWord" name="PassWord" placeholder="Password" maxlength="30" required="" type="password">
    <div class="form-check"><input type="checkbox" class="form-check-input" id="RememberMe" name="RememberMe" checked="">

    <label class="form-check-label" for="RememberMe">@state.Localized("RememberMe")</label></div>
    
    <button type="submit" id="LoginButton" @onclick=SignIn >@state.Localized("SignIn")</button>

    <p class="ResetPassword">@state.Localized("HavingTrouble")
    <a href="/PasswordReset">@state.Localized("ResetYourPassword")</a></p></form>
</div>

@code {

    private void SignIn()
    {
        state.user = new User();
        NavigationManager.NavigateTo("/");

      
    }

    protected override async Task OnInitializedAsync()
    {
        if (state.user != null)
        {
            NavigationManager.NavigateTo("/");
        }

        state.OnChange += StateHasChanged;

        var lang = ((await localStorage.GetItemAsync<string>("lang")) ?? state.lang);
        var langItems = await Http.GetStringAsync($"/ModelData/i18n/{lang}.json");
        state.LangItems = JsonConvert.DeserializeObject<Dictionary<string, string>>(langItems);
        state.MenuItems = await Http.GetFromJsonAsync<List<MenuItem>>($"/ModelData/menu/{lang}.json");

    }
}
