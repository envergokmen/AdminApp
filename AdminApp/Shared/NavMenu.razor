@inject HttpClient Http
@inject StateContainer state
@using Newtonsoft.Json
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService  sessionStorage

@inject NavigationManager NavigationManager
@using System.Globalization

<ul class="page-sidebar-menu" data-keep-expanded="false" data-auto-scroll="true" data-slide-speed="200">
    @foreach (var item in state.MenuItems)
    {
        <li data-id="">

            <a href="javascript:;" class="@(item.Name==openMenu?"active":"")" @onclick="() => SetOpenMenu(item.Name)"  title="">
                <i class="iconfirst fa fa-@(item.icon != null ? item.icon : "fa-bookmark")" /> @item.Name <i class="fa-angle-down fa" />
                <span class="selected"></span>
            </a>

            <ul class="sub-menu">
                @if (item.SubItems != null && item.SubItems.Any())
                {
                    foreach (var subitem in item.SubItems)
                    {
                        <li @onclick="() => SetActiveMenu(subitem.Name)" data-id="@subitem.LinkTo">
                            <NavLink class="@(subitem.Name==activeMenu?"active":"inactive")" ActiveClass="none" href="@item.LinkTo"><i class="fa fa-@(item.icon != null ? item.icon : "fa-bookmark")" />@subitem.Name </NavLink>
                        </li>

                    }
                }
            </ul>
        </li>
    }
</ul>

@code {
    private bool collapseNavMenu = true;
    private string openMenu = "";
    private string activeMenu = "";


    protected override async Task OnInitializedAsync()
    {

        var user = (await localStorage.GetItemAsync<string>("user"));
        if (user != null)
        {
            state.user = JsonConvert.DeserializeObject<User>(user);
        }

        if (state.user == null)
        {
            NavigationManager.NavigateTo($"{StateContainer.basePath}/login");

        }

        state.OnChange += StateHasChanged;

        var lang = ((await localStorage.GetItemAsync<string>("lang")) ?? state.lang);


        var cultureInfo = new System.Globalization.CultureInfo(lang.ToLower() == "tr" ? "tr-TR" : "en-US");

        await localStorage.SetItemAsync("BlazorCulture", lang.ToLower() == "tr" ? "tr-TR" : "en-US");

        CultureInfo.DefaultThreadCurrentCulture = cultureInfo;
        CultureInfo.DefaultThreadCurrentUICulture = cultureInfo;

        var langItems = await localStorage.GetItemAsStringAsync("langItems");
        var menuItems = await sessionStorage.GetItemAsStringAsync("menuItems");

        if (langItems == null || menuItems == null)
        {
            langItems = await Http.GetStringAsync($"{StateContainer.basePath}/ModelData/i18n/{lang}.json");
            menuItems = await Http.GetStringAsync($"{StateContainer.basePath}/ModelData/menu/{lang}.json");
        }

        state.LangItems = JsonConvert.DeserializeObject<Dictionary<string, string>>(langItems);
        state.MenuItems = JsonConvert.DeserializeObject<List<MenuItem>>(menuItems);

        await localStorage.SetItemAsStringAsync("langItems", JsonConvert.SerializeObject(state.LangItems));
        await sessionStorage.SetItemAsStringAsync("menuItems", JsonConvert.SerializeObject(state.MenuItems));

    }

    private async void LogOut()
    {
        state.user = null;
        await localStorage.RemoveItemAsync("user");
        await sessionStorage.RemoveItemAsync("menuItems");
        await localStorage.RemoveItemAsync("langItems");

        NavigationManager.NavigateTo($"{StateContainer.basePath}/login");
    }

    private void SetOpenMenu(string menuName)
    {
        if (openMenu == menuName) openMenu = "none";
        else
        {
            openMenu = menuName;

        }

    }

    private void SetActiveMenu(string menuName)
    {
        activeMenu = menuName;
        state.menuOpen = "closed";
    }

    private async void ChangeLang(string lang)
    {
        await localStorage.SetItemAsync("lang", lang);
        state.lang = lang;

        var cultureInfo = new System.Globalization.CultureInfo(lang.ToLower() == "tr" ? "tr-TR" : "en-US");
        await localStorage.SetItemAsync("BlazorCulture", lang.ToLower() == "tr" ? "tr-TR" : "en-US");

        CultureInfo.DefaultThreadCurrentCulture = cultureInfo;
        CultureInfo.DefaultThreadCurrentUICulture = cultureInfo;

        var langItems = await Http.GetStringAsync($"{StateContainer.basePath}/ModelData/i18n/{lang}.json");
        var menuItems = await Http.GetStringAsync($"{StateContainer.basePath}/ModelData/menu/{lang}.json");

        state.LangItems = JsonConvert.DeserializeObject<Dictionary<string, string>>(langItems);
        state.MenuItems = JsonConvert.DeserializeObject<List<MenuItem>>(menuItems);

        await localStorage.SetItemAsStringAsync("langItems", JsonConvert.SerializeObject(state.LangItems));
        await localStorage.SetItemAsStringAsync("menuItems", JsonConvert.SerializeObject(state.MenuItems));


    }

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }
}
